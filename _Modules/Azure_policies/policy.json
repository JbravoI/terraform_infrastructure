{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "containerRegistryName": {
        "metadata": {
          "description": "Enter name for the azure container registry"
        },
        "type": "string"
      },
      "Kubernetes_disable_automounting_API_credentials": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Kubernetes_cluster_containers_should_only_use_allowed_images": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Kubernetes_cluster_services_should_listen_only_on_allowed_ports": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Kubernetes_should_not_allow_container_privilege_escalation": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Kubernetes_Pods_should_only_run_with_approved_user_and_group_IDs": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Kubernetes_containers_should_only_use_allowed_capabilities": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Kubernetes_should_not_use_the_default_namespace": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Storage_accounts_should_have_the_specified_minimum_TLS_version": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      },
      "Containers_should_run_with_a_read_only_root_file_system": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Policy is applied or not"
          }
      }
    },
    "resources": [
      {
        "condition": "[if(parameters('Kubernetes_disable_automounting_API_credentials'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes disable automounting API credentials",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/423dd1ba-798e-40e4-9c4d-b6902674b423",
          "parameters": {
            "effect": {
              "value": "Deny"
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Kubernetes_cluster_containers_should_only_use_allowed_images'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes cluster containers should only use allowed images",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/febd0533-8e55-448f-b837-bd0e06f16469",
          "parameters": {
            "effect": {
              "value": "Deny"
            },
            "allowedContainerImagesRegex": {
              "value": "[concat('^',parameters('containerRegistryName'),'.azurecr.io\\/.+$')]"
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Kubernetes_cluster_services_should_listen_only_on_allowed_ports'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes cluster services should listen only on allowed ports",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/233a2a17-77ca-4fb1-9b6b-69223d272a44",
          "parameters": {
            "effect": {
              "value": "Deny"
            },
            "allowedServicePortsList": {
              "value": ["443","80","4010","4020","4030","4040","4050","4060","4070","4080","4090","4110","4120","4130","5050","5432","587","6379","2424","2480","8080","10254"]
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Kubernetes_should_not_allow_container_privilege_escalation'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes should not allow container privilege escalation",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1c6e92c9-99f0-4e55-9cf2-0c234dc48f99",
          "parameters": {
            "effect": {
              "value": "Deny"
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Kubernetes_Pods_should_only_run_with_approved_user_and_group_IDs'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes Pods should only run with approved user and group IDs",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/f06ddb64-5fa3-4b77-b166-acb36f7f6042",
          "parameters": {
            "effect": {
              "value": "Deny"
            },
            "runAsUserRule": {
              "value": "MustRunAsNonRoot"
            },
            "runAsUserRanges": {
              "value": {
                  "ranges": [
                    {
                      "min": 1000,
                      "max": 1000
                    },
                    {
                      "min": 5050,
                      "max": 5050
                    },
                    {
                      "min": 101,
                      "max": 101
                    },
                    {
                      "min": 65534,
                      "max": 65534
                    },
                    {
                      "min": 2000,
                      "max": 2000
                    }
                  ]
                }
          },
            "fsGroupRule": {
              "value": "MustRunAs"
            },
            "fsGroupRanges": {
              "value": {
                "ranges": [
                  {
                    "min": 1000,
                    "max": 1000
                  },
                  {
                    "min": 5050,
                    "max": 5050
                  },
                  {
                    "min": 101,
                    "max": 101
                  },
                  {
                    "min": 65534,
                    "max": 65534
                  },
                  {
                    "min": 2000,
                    "max": 2000
                  }
                ]
              }
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Kubernetes_containers_should_only_use_allowed_capabilities'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes containers should only use allowed capabilities",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/c26596ff-4d70-4e6a-9a30-c2506bd2f80c",
          "parameters": {
            "effect": {
              "value": "Deny"
            },
            "allowedCapabilities": {
              "value": ["NET_BIND_SERVICE"]
            },
            "requiredDropCapabilities": {
                "value": ["all","ALL"]
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Storage_accounts_should_have_the_specified_minimum_TLS_version'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Storage accounts should have the specified minimum TLS version",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/fe83a0eb-a853-422d-aac2-1bffd182c5d0",
          "parameters": {
            "effect": {
              "value": "Deny"
            },
            "minimumTlsVersion": {
              "value": "TLS1_2"
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Kubernetes_should_not_use_the_default_namespace'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Kubernetes should not use the default namespace",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/9f061a12-e40d-4183-a00e-171812443373",
          "parameters": {
            "effect": {
              "value": "Deny"
            }
          }
        }
      },
      {
        "condition": "[if(parameters('Containers_should_run_with_a_read_only_root_file_system'),bool('true'),bool('false'))]",
        "type": "Microsoft.Authorization/policyAssignments",
        "name": "Containers should run with a read only root file system",
        "apiVersion": "2022-06-01",
        "properties": {
          "scope": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', resourceGroup().name)]",
          "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/df49d893-a74c-421d-bc95-c663042e5b80",
          "parameters": {
            "effect": {
              "value": "Deny"
            },
            "excludedContainers": {
              "value": ["content-processing-api","intelinotion-pleasereview-api","intelinotion-document-processing-service","controller","intelinotion-pgadmin","intelinotion-pginit"]
            }
          }
        }
      }
    ]
  }